/*********************************************************
*   Diego Messina              4Â°H	    22/09/22     *
*							 *
*                                                        *
*   funzioni di matrici e vettori                        * 
*                                                        *
**********************************************************/ 


#include <stdio.h> 
#include <stdlib.h>
#include <time.h> 
#define N 10 //dimensione vettore
#define R 5
#define C 5

int menu();
void carica_m(int []);
void carica_c(int[], int , int);
int ricerca_ingenua(int[],int);
int ricerca_sentinella(int[],int);
void ordina_1(int[]);	//ordinamento ingenuo
void ordina_2(int[]);	//bubble sort
void stampavet(int []);
void caricamatrice(int [][C]);
void caricamat_c(int [][C],int,int);//carica casuale
void stampamatrice(int [][C]);
void ordinamat (int mat[][C]);

int main() {
    int vett[N], s, a, b, r , mat[R][C] , min=1 , max=100;
	do
	{
		s=menu();
		switch(s)
		{
			case 0:
				printf("Chiusura programma, grazie per aver scelto i nostri servizi!");
			break;
			
			case 1:
				carica_m(vett);
			break;
				
			case 2:
				printf("inserisci il minimo e il massimo:");
				scanf("%d%d",&a,&b);
				carica_c(vett, a, b);//completare chiedendo all'utente di inserire a e b
			break;
				
			case 3:
				printf("inserisci il numero da cercare:");
				scanf("%d",&a);
				r=ricerca_ingenua(vett,a);//ricerca ingenua
				if(r==-1)
				printf("numero non trovato\n");
				else
				printf("numero trovato nella cella:%d\n",r);
			break;
				
			case 4:
				printf("inserisci il numero da cercare:");
				scanf("%d",&a);
				r=ricerca_sentinella(vett,a);
				printf("numero trovato nella cella:%d\n",r);//ricerca con sentinella
			break;
			
			case 5:
				ordina_1(vett);	//ordinamento ingenuo
			break;
				
			case 6:
				ordina_2(vett);	//ordinamento bubble sort 
			break;
			
			case 7:
				stampavet(vett);
			break;
				
			case 8:
				printf("carica la matrice:\n");
				caricamatrice(mat);
			break;
				
			case 9:
				caricamat_c(mat,min,max);//carica casuale
			break;
				
			case 10:
				stampamatrice(mat);
		        break;
				
			case 11:
				ordinamat(mat);
			break;
		}
	}while(s!=0);
    return 0;
}

int menu()
{
	int scelta;
	do{
		printf(" 1: Carica array manualmente\n");
		printf(" 2: Carica array casualmente\n");
		printf(" 3: Ricerca ingenua\n");
		printf(" 4: Ricerca con sentinella\n");
		printf(" 5: Ordinamento con ricerca ingenua\n");
		printf(" 6: Ordinamento con bubble sort\n");
		printf(" 7: Stampa vettore\n");
		printf(" 8: Carica matrice manualmente\n");
		printf(" 9: Carica matrice casualmente\n");
	        printf("10: Stampa matrice\n");
	        printf("11: Ordina matrice\n");
		printf(" 0: Chiudi il programma\n");
		scanf("%d", &scelta);
		if(scelta<0 ||scelta>11)
	        printf("Errore! Opzione non disponibile");
		
	}while(scelta<0 ||scelta>11);
	return scelta;
}

void carica_m(int v[])//inserimento manuale
{
	int i;
	printf("Inserisci %d numeri interi:\n", N);
	for(i=0;i<N;i++)
		scanf("%d", &v[i]);
}

void carica_c(int v[], int min, int max)//inserimento casuale
{
	int i;
	srand(time(NULL));
	for(i=0; i<N; i++)
		v[i]=rand()%(max-min+1)+min;
}

int ricerca_ingenua(int v[], int x)//ricerca ingenua
{
	int indice=-1, i;
	for(i=0; i<N; i++)
	{
		if(v[i]==x)
			indice=i;
	}
	return indice;
}

	

int ricerca_sentinella(int v[],int x)//ricerca con sentinella
{
	int i=0;
	while(v[i]!=x && i<N)
		i++;
	return i;
}

void ordina_1(int v[])	//ordinamento ingenuo
{
	int i, j, temp;
	//uso due cicli per effettuare l'ordinamento
	for(i=0;i<N-1;i++)	//confronto un elemento (indicato con il contatore i con tutti gli altri)
		for(j=i+1;j<N;j++)
		{
			if(v[i]>v[j])	//se scorrendo il vettore trovo un elemento pi? grande, li scambio di posto
			{
				temp=v[i];	//utilizzo una variabile di appoggio per effettuare lo scambio
				v[i]=v[j];
				v[j]=temp;
			}
		}
		//fine ordinamento
}

void ordina_2(int v[])	//ordinamento bubble sort parametrico
{
	int i, temp, scambio;
	do
	{
		scambio=0;
	
		for(i=0; i<N-1; i++)
		{
			if(v[i]>v[i+1])
			{
				temp=v[i];
				v[i]=v[i+1];
				v[i+1]=temp;
				scambio=1;
			}
		}
	}while(scambio==1);
}

void stampavet(int vett[N])
{
	int i;
	for(i=0;i<N;i++)
		printf("%d",vett[i]);
}

void caricamatrice(int m[][C])
{
	int i,j;
	
	for(i=0;i<R;i++)
	{
		for(j=0;j<C;j++)
		{
			scanf("%d",&m[i][j]);
		}
	}
	
}

void caricamat_c(int m[][C],int max,int min)
{
	int i,j;
	srand(time(NULL));
	for (i=0;i<R;i++)
		for(j=0;j<C;j++)
			m[i][j]=rand()%(max-min+1)+min;
}

void stampamatrice(int m[][C])
{
	int i,j;
	
	for(i=0;i<R;i++)
	{
		for(j=0;j<C;j++)
		{
			printf("%d\t",m[i][j]);
		}
		printf("\n");
	}	
}

void ordinamat (int mat[][C])
{
		int i,scambio,riga,s;
	printf("inserisci la riga da ordinare");
	scanf("%d", &riga);
	do
	{
		scambio=0;
		for(i=0;i<C-1;i++)
		{
			if(mat[riga][i]>mat[riga][i+1])
			{
				s=mat[riga][i];
				mat[riga][i]=mat[riga][i+1];
				mat[riga][i+1]=s;
			}
		}
	}while(scambio!=1);

}


